/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.4.1 public/models/dodge.glb -o src/components/dodge.jsx -r public 
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { useSelector } from "react-redux";

export function DodgeCar(props) {
  const { nodes, materials } = useGLTF("/models/dodge.glb");
  const { syria_points } = useSelector((state) => state.points);
  const [syriaDriving, setSyriaDriving] = useState(0);
  const intervalRef = useRef(null);

  useEffect(() => {
    if (syria_points === 0) {
      setSyriaDriving(0);
    } else {
      if (syria_points !== syriaDriving) {
        if (intervalRef.current) {
          clearInterval(intervalRef.current);
        }
        intervalRef.current = setInterval(() => {
          setSyriaDriving((prev) => {
            const nextValue = prev + 0.01;
            if (nextValue >= syria_points) {
              clearInterval(intervalRef.current);
              intervalRef.current = null;
              return syria_points;
            }
            return nextValue;
          });
        }, 5);
      }
    }

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [syria_points, syriaDriving]);

  return (
    <group
      {...props}
      dispose={null}
      scale={0.4}
      position={[-1.7, -0.4, syriaDriving * 2 - 4.5]}
    >
      <mesh
        geometry={nodes["Circle004-Mesh"].geometry}
        material={materials.grey}
      />
      <mesh
        geometry={nodes["Circle004-Mesh_1"].geometry}
        material={materials.black}
      />
      <mesh
        geometry={nodes["Circle004-Mesh_2"].geometry}
        material={materials.tire}
      />
      <mesh
        geometry={nodes["Circle003-Mesh"].geometry}
        material={materials.tire}
      />
      <mesh
        geometry={nodes["Circle003-Mesh_1"].geometry}
        material={materials.grey}
      />
      <mesh
        geometry={nodes["Circle003-Mesh_2"].geometry}
        material={materials.black}
      />
      <mesh
        geometry={nodes["Circle002-Mesh"].geometry}
        material={materials.tire}
      />
      <mesh
        geometry={nodes["Circle002-Mesh_1"].geometry}
        material={materials.grey}
      />
      <mesh
        geometry={nodes["Circle002-Mesh_2"].geometry}
        material={materials.black}
      />
      <mesh
        geometry={nodes["Circle001-Mesh"].geometry}
        material={materials.tire}
      />
      <mesh
        geometry={nodes["Circle001-Mesh_1"].geometry}
        material={materials.grey}
      />
      <mesh
        geometry={nodes["Circle001-Mesh_2"].geometry}
        material={materials.black}
      />
      <mesh
        geometry={nodes["Plane_Plane002-Mesh"].geometry}
        material={materials.Roof_Black}
      />
      <mesh
        geometry={nodes["Plane_Plane002-Mesh_1"].geometry}
        material={materials.Red_Chasis}
      />
      <mesh
        geometry={nodes["Plane_Plane002-Mesh_2"].geometry}
        material={materials.really_Black}
      />
      <mesh
        geometry={nodes["Plane_Plane002-Mesh_3"].geometry}
        material={materials.Metalic}
      />
      <mesh
        geometry={nodes["Plane_Plane002-Mesh_4"].geometry}
        material={materials.red_light}
      />
      <mesh
        geometry={nodes["Plane_Plane002-Mesh_5"].geometry}
        material={materials.glass}
      />
    </group>
  );
}

useGLTF.preload("/models/dodge.glb");
