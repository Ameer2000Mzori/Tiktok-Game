/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.4.1 public/models/BlueCar.glb -o src/components/BlueCar.jsx -r public 
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { useSelector } from "react-redux";

export function BlueCar(props) {
  const { nodes, materials } = useGLTF("/models/BlueCar.glb");
  const { kurdistan_points } = useSelector((state) => state.points);

  const [kurdistanDriving, setKurdistanDriving] = useState(0);
  const intervalRef = useRef(null);

  useEffect(() => {
    if (kurdistan_points === 0) {
      setKurdistanDriving(0);
    } else {
      if (kurdistan_points !== kurdistanDriving) {
        if (intervalRef.current) {
          clearInterval(intervalRef.current);
        }
        intervalRef.current = setInterval(() => {
          setKurdistanDriving((prev) => {
            const nextValue = prev + 0.01;
            if (nextValue >= kurdistan_points) {
              clearInterval(intervalRef.current);
              intervalRef.current = null;
              return kurdistan_points;
            }
            return nextValue;
          });
        }, 5);
      }
    }

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [kurdistan_points, kurdistanDriving]);

  return (
    <group
      {...props}
      dispose={null}
      scale={0.028}
      position={[1.7, -0.6, kurdistanDriving * 2 - 4.5]}
    >
      <mesh geometry={nodes.Car.geometry} material={materials.Mat} />
    </group>
  );
}

useGLTF.preload("/models/BlueCar.glb");
